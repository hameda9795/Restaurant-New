package com.example.Restaurant.model;

import com.fasterxml.jackson.annotation.JsonBackReference;
import jakarta.persistence.*;

/**
 * Represents a food item in an order.
 * This entity is mapped to the "order_items" table in the database.
 *
 * Relationships:
 * - Many-to-one relationship with Order.
 * - Many-to-one relationship with Food.
 */
@Entity
public class OrderItem {

    /**
     * The unique identifier for the order item.
     * This field is mapped to the "id" column in the "order_items" table.
     * It is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Auto-increment ID
    private Long id;

    /**
     * The order to which this item belongs.
     * This field is mapped to the "order_id" column in the "order_items" table.
     * It represents a many-to-one relationship with the Order entity.
     */
    @ManyToOne
    @JoinColumn(name = "order_id")
    @JsonBackReference
    private Order order;

    /**
     * The food item in the order.
     * This field represents a many-to-one relationship with the Food entity.
     */
    @ManyToOne
    private Food food; // Each order item represents a food item

    /**
     * The quantity of the food item in the order.
     * This field is mapped to the "quantity" column in the "order_items" table.
     * It represents the number of units of the food item in the order.
     */
    private Integer quantity; // Quantity of the food item in the order

    /**
     * The price of the food item in the order.
     * This field is mapped to the "price" column in the "order_items" table.
     * It represents the total price for the quantity of the food item.
     */
    private Double price; // Price of the food item (food price * quantity)

    /**
     * Default constructor.
     * Initializes a new instance of the OrderItem class.
     */
    public OrderItem() {}

    /**
     * Full constructor.
     * Initializes the order item with the specified order, food, and quantity.
     * Calculates the price based on the food price and quantity.
     *
     * @param order the order to which this item belongs
     * @param food the food item in the order
     * @param quantity the quantity of the food item in the order
     */
    public OrderItem(Order order, Food food, Integer quantity) {
        this.order = order;
        this.food = food;
        this.quantity = quantity;
        this.price = food.getPrice() * quantity;
    }

    /**
     * Gets the ID of the order item.
     *
     * @return the ID of the order item
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the ID of the order item.
     *
     * @param id the ID to set
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the order to which this item belongs.
     *
     * @return the order
     */
    public Order getOrder() {
        return order;
    }

    /**
     * Sets the order to which this item belongs.
     *
     * @param order the order to set
     */
    public void setOrder(Order order) {
        this.order = order;
    }

    /**
     * Gets the food item in the order.
     *
     * @return the food item
     */
    public Food getFood() {
        return food;
    }

    /**
     * Sets the food item in the order.
     *
     * @param food the food item to set
     */
    public void setFood(Food food) {
        this.food = food;
    }

    /**
     * Gets the quantity of the food item in the order.
     *
     * @return the quantity of the food item
     */
    public Integer getQuantity() {
        return quantity;
    }

    /**
     * Sets the quantity of the food item in the order.
     *
     * @param quantity the quantity to set
     */
    public void setQuantity(Integer quantity) {
        this.quantity = quantity;
    }

    /**
     * Gets the price of the food item in the order.
     *
     * @return the price of the food item
     */
    public Double getPrice() {
        return price;
    }

    /**
     * Sets the price of the food item in the order.
     *
     * @param price the price to set
     */
    public void setPrice(Double price) {
        this.price = price;
    }
}