package com.example.Restaurant.model;

    import jakarta.persistence.*;
    import com.fasterxml.jackson.annotation.JsonIgnore;

    /**
     * Represents an ingredient used in a recipe.
     * This entity is mapped to the "recipe_ingredients" table in the database.
     *
     * Relationships:
     * - Many-to-one relationship with Recipe.
     * - Many-to-one relationship with Ingredient.
     */
    @Entity
    public class RecipeIngredient {

        /**
         * The unique identifier for the recipe ingredient.
         * This field is mapped to the "id" column in the "recipe_ingredients" table.
         * It is auto-generated by the database.
         */
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY) // Auto-increment ID
        private Long id;

        /**
         * The recipe to which this ingredient belongs.
         * This field is mapped to the "recipe_id" column in the "recipe_ingredients" table.
         * It represents a many-to-one relationship with the Recipe entity.
         */
        @ManyToOne
        @JoinColumn(name = "recipe_id") // Specifies the foreign key column
        @JsonIgnore // Prevents serialization of the recipe field to avoid infinite recursion
        private Recipe recipe;

        /**
         * The ingredient used in the recipe.
         * This field is mapped to the "ingredient_id" column in the "recipe_ingredients" table.
         * It represents a many-to-one relationship with the Ingredient entity.
         */
        @ManyToOne
        @JoinColumn(name = "ingredient_id") // Specifies the foreign key column
        private Ingredient ingredient;

        /**
         * The amount of the ingredient used in the recipe.
         * This field is mapped to the "amount" column in the "recipe_ingredients" table.
         * It represents the quantity of the ingredient.
         */
        private Double amount; // Amount of the ingredient used in the recipe

        /**
         * The unit of measurement for the ingredient amount.
         * This field is mapped to the "unit" column in the "recipe_ingredients" table.
         * It represents the unit of measurement (e.g., grams, liters).
         */
        private String unit; // Unit of measurement for the ingredient amount

        /**
         * Default constructor.
         * Initializes a new instance of the RecipeIngredient class.
         */
        public RecipeIngredient() {}

        /**
         * Gets the ID of the recipe ingredient.
         *
         * @return the ID of the recipe ingredient
         */
        public Long getId() {
            return id;
        }

        /**
         * Sets the ID of the recipe ingredient.
         *
         * @param id the ID to set
         */
        public void setId(Long id) {
            this.id = id;
        }

        /**
         * Gets the recipe to which this ingredient belongs.
         *
         * @return the recipe
         */
        public Recipe getRecipe() {
            return recipe;
        }

        /**
         * Sets the recipe to which this ingredient belongs.
         *
         * @param recipe the recipe to set
         */
        public void setRecipe(Recipe recipe) {
            this.recipe = recipe;
        }

        /**
         * Gets the ingredient used in the recipe.
         *
         * @return the ingredient
         */
        public Ingredient getIngredient() {
            return ingredient;
        }

        /**
         * Sets the ingredient used in the recipe.
         *
         * @param ingredient the ingredient to set
         */
        public void setIngredient(Ingredient ingredient) {
            this.ingredient = ingredient;
        }

        /**
         * Gets the amount of the ingredient used in the recipe.
         *
         * @return the amount of the ingredient
         */
        public Double getAmount() {
            return amount;
        }

        /**
         * Sets the amount of the ingredient used in the recipe.
         *
         * @param amount the amount to set
         */
        public void setAmount(Double amount) {
            this.amount = amount;
        }

        /**
         * Gets the unit of measurement for the ingredient amount.
         *
         * @return the unit of measurement
         */
        public String getUnit() {
            return unit;
        }

        /**
         * Sets the unit of measurement for the ingredient amount.
         *
         * @param unit the unit to set
         */
        public void setUnit(String unit) {
            this.unit = unit;
        }
    }