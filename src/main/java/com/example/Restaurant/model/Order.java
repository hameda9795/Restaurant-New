package com.example.Restaurant.model;

    import com.fasterxml.jackson.annotation.JsonManagedReference;
    import jakarta.persistence.*;
    import java.time.LocalDateTime;
    import java.util.List;

    /**
     * Represents an order placed by a customer.
     * This entity is mapped to the "customer_orders" table in the database.
     *
     * Relationships:
     * - One-to-many relationship with OrderItem.
     */
    @Entity
    @Table(name = "customer_orders")
    public class Order {

        /**
         * The unique identifier for the order.
         * This field is mapped to the "id" column in the "customer_orders" table.
         * It is auto-generated by the database.
         */
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;

        /**
         * The table number where the order was placed.
         * This field is mapped to the "table_number" column in the "customer_orders" table.
         * It represents the table number (1-25).
         */
        private String tableNumber;

        /**
         * The time when the order was placed.
         * This field is mapped to the "order_time" column in the "customer_orders" table.
         * It stores the date and time of the order.
         */
        private LocalDateTime orderTime;

        /**
         * The list of items in the order.
         * This field is mapped to the "order_items" table with a one-to-many relationship.
         * CascadeType.ALL ensures that related OrderItems are persisted, updated, or deleted along with the Order.
         * FetchType.LAZY means that the order items are loaded on demand.
         */
        @OneToMany(mappedBy = "order", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
        @JsonManagedReference
        private List<OrderItem> orderItems;

        /**
         * The total price of the order.
         * This field is mapped to the "total_price" column in the "customer_orders" table.
         * It represents the total cost of the order.
         */
        private Double totalPrice;

        /**
         * The status of the order.
         * This field is mapped to the "status" column in the "customer_orders" table.
         * It represents the current status of the order (Pending, Preparing, Ready, Delivered).
         */
        private String status;

        /**
         * The time when the order was delivered.
         * This field is mapped to the "delivery_time" column in the "customer_orders" table.
         * It stores the date and time when the order was delivered.
         */
        private LocalDateTime deliveryTime;

        /**
         * Default constructor.
         * Initializes the order time to the current time and sets the status to "Pending".
         */
        public Order() {
            this.orderTime = LocalDateTime.now();
            this.status = "Pending";
        }

        /**
         * Full constructor.
         * Initializes the order with the specified table number, order items, and total price.
         *
         * @param tableNumber the table number where the order was placed
         * @param orderItems the list of items in the order
         * @param totalPrice the total price of the order
         */
        public Order(String tableNumber, List<OrderItem> orderItems, Double totalPrice) {
            this();
            this.tableNumber = tableNumber;
            this.orderItems = orderItems;
            this.totalPrice = totalPrice;
        }

        /**
         * Gets the ID of the order.
         *
         * @return the ID of the order
         */
        public Long getId() {
            return id;
        }

        /**
         * Sets the ID of the order.
         *
         * @param id the ID to set
         */
        public void setId(Long id) {
            this.id = id;
        }

        /**
         * Gets the table number where the order was placed.
         *
         * @return the table number
         */
        public String getTableNumber() {
            return tableNumber;
        }

        /**
         * Sets the table number where the order was placed.
         *
         * @param tableNumber the table number to set
         */
        public void setTableNumber(String tableNumber) {
            this.tableNumber = tableNumber;
        }

        /**
         * Gets the time when the order was placed.
         *
         * @return the order time
         */
        public LocalDateTime getOrderTime() {
            return orderTime;
        }

        /**
         * Sets the time when the order was placed.
         *
         * @param orderTime the order time to set
         */
        public void setOrderTime(LocalDateTime orderTime) {
            this.orderTime = orderTime;
        }

        /**
         * Gets the list of items in the order.
         *
         * @return the list of order items
         */
        public List<OrderItem> getOrderItems() {
            return orderItems;
        }

        /**
         * Sets the list of items in the order.
         *
         * @param orderItems the list of order items to set
         */
        public void setOrderItems(List<OrderItem> orderItems) {
            this.orderItems = orderItems;
        }

        /**
         * Gets the total price of the order.
         *
         * @return the total price of the order
         */
        public Double getTotalPrice() {
            return totalPrice;
        }

        /**
         * Sets the total price of the order.
         *
         * @param totalPrice the total price to set
         */
        public void setTotalPrice(Double totalPrice) {
            this.totalPrice = totalPrice;
        }

        /**
         * Gets the status of the order.
         *
         * @return the status of the order
         */
        public String getStatus() {
            return status;
        }

        /**
         * Sets the status of the order.
         *
         * @param status the status to set
         */
        public void setStatus(String status) {
            this.status = status;
        }

        /**
         * Gets the time when the order was delivered.
         *
         * @return the delivery time
         */
        public LocalDateTime getDeliveryTime() {
            return deliveryTime;
        }

        /**
         * Sets the time when the order was delivered.
         *
         * @param deliveryTime the delivery time to set
         */
        public void setDeliveryTime(LocalDateTime deliveryTime) {
            this.deliveryTime = deliveryTime;
        }

        /**
         * Helper method to calculate the total price based on the order items.
         * Sums up the prices of all items in the order.
         */
        public void calculateTotalPrice() {
            this.totalPrice = orderItems.stream()
                    .mapToDouble(OrderItem::getPrice)
                    .sum();
        }

        /**
         * Helper method to add an item to the order.
         * Adds the specified item to the order and updates the total price.
         *
         * @param item the item to add to the order
         */
        public void addOrderItem(OrderItem item) {
            orderItems.add(item);
            item.setOrder(this);
            calculateTotalPrice();
        }

        /**
         * Helper method to remove an item from the order.
         * Removes the specified item from the order and updates the total price.
         *
         * @param item the item to remove from the order
         */
        public void removeOrderItem(OrderItem item) {
            orderItems.remove(item);
            item.setOrder(null);
            calculateTotalPrice();
        }
    }