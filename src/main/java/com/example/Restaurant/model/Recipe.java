package com.example.Restaurant.model;

import jakarta.persistence.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Represents a recipe for a food item.
 * This entity is mapped to the "recipes" table in the database.
 *
 * Relationships:
 * - Many-to-one relationship with Food.
 * - One-to-many relationship with RecipeIngredient.
 */
@Entity
public class Recipe {

    /**
     * The unique identifier for the recipe.
     * This field is mapped to the "id" column in the "recipes" table.
     * It is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Auto-increment ID
    private Long id;

    /**
     * The food item associated with this recipe.
     * This field is mapped to the "food_id" column in the "recipes" table.
     * It represents a many-to-one relationship with the Food entity.
     */
    @ManyToOne
    @JoinColumn(name = "food_id") // Specifies the foreign key column
    private Food food;

    /**
     * The list of ingredients in the recipe.
     * This field represents a one-to-many relationship with the RecipeIngredient entity.
     * It is mapped by the "recipe" field in the RecipeIngredient entity.
     * CascadeType.ALL ensures that all operations (persist, merge, remove, etc.) are cascaded to the ingredients.
     * OrphanRemoval = true ensures that ingredients are removed when they are no longer associated with this recipe.
     */
    @OneToMany(mappedBy = "recipe", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<RecipeIngredient> ingredients = new ArrayList<>();

    /**
     * The instructions for preparing the recipe.
     * This field is mapped to the "instructions" column in the "recipes" table.
     * It represents the step-by-step instructions for preparing the food item.
     */
    private String instructions;

    /**
     * Default constructor.
     * Initializes a new instance of the Recipe class.
     */
    public Recipe() {}

    /**
     * Gets the ID of the recipe.
     *
     * @return the ID of the recipe
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the ID of the recipe.
     *
     * @param id the ID to set
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the food item associated with this recipe.
     *
     * @return the food item
     */
    public Food getFood() {
        return food;
    }

    /**
     * Sets the food item associated with this recipe.
     *
     * @param food the food item to set
     */
    public void setFood(Food food) {
        this.food = food;
    }

    /**
     * Gets the list of ingredients in the recipe.
     *
     * @return the list of ingredients
     */
    public List<RecipeIngredient> getIngredients() {
        return ingredients;
    }

    /**
     * Sets the list of ingredients in the recipe.
     * Clears the current list and adds the new ingredients.
     *
     * @param ingredients the list of ingredients to set
     */
    public void setIngredients(List<RecipeIngredient> ingredients) {
        this.ingredients.clear();
        if (ingredients != null) {
            for (RecipeIngredient ingredient : ingredients) {
                addIngredient(ingredient);
            }
        }
    }

    /**
     * Gets the instructions for preparing the recipe.
     *
     * @return the instructions
     */
    public String getInstructions() {
        return instructions;
    }

    /**
     * Sets the instructions for preparing the recipe.
     *
     * @param instructions the instructions to set
     */
    public void setInstructions(String instructions) {
        this.instructions = instructions;
    }

    /**
     * Adds an ingredient to the recipe.
     * Sets the recipe reference in the ingredient.
     *
     * @param ingredient the ingredient to add
     */
    public void addIngredient(RecipeIngredient ingredient) {
        ingredients.add(ingredient);
        ingredient.setRecipe(this);
    }

    /**
     * Removes an ingredient from the recipe.
     * Clears the recipe reference in the ingredient.
     *
     * @param ingredient the ingredient to remove
     */
    public void removeIngredient(RecipeIngredient ingredient) {
        ingredients.remove(ingredient);
        ingredient.setRecipe(null);
    }
}