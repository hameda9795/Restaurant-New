package com.example.Restaurant.model;

    import jakarta.persistence.*;
    import java.time.LocalDateTime;

    /**
     * Represents a user in the system.
     * This entity is mapped to the "users" table in the database.
     *
     * Relationships:
     * - None specified.
     */
    @Entity
    @Table(name = "users")
    public class User {

        /**
         * The unique identifier for the user.
         * This field is mapped to the "id" column in the "users" table.
         * It is auto-generated by the database.
         */
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY) // Auto-increment ID
        private Long id;

        /**
         * The username of the user.
         * This field is mapped to the "username" column in the "users" table.
         * It must be unique and cannot be null.
         */
        @Column(unique = true, nullable = false) // Unique and not null
        private String username;

        /**
         * The password of the user.
         * This field is mapped to the "password" column in the "users" table.
         * It cannot be null.
         */
        @Column(nullable = false) // Not null
        private String password;

        /**
         * The role of the user.
         * This field is mapped to the "role" column in the "users" table.
         * It is stored as a string and cannot be null.
         */
        @Enumerated(EnumType.STRING) // Store as string
        @Column(nullable = false) // Not null
        private Role role;

        /**
         * The first name of the user.
         * This field is mapped to the "first_name" column in the "users" table.
         */
        private String firstName;

        /**
         * The last name of the user.
         * This field is mapped to the "last_name" column in the "users" table.
         */
        private String lastName;

        /**
         * Indicates whether the user is active.
         * This field is mapped to the "is_active" column in the "users" table.
         * It defaults to true.
         */
        private Boolean isActive = true; // Default to true

        /**
         * The last login time of the user.
         * This field is mapped to the "last_login" column in the "users" table.
         */
        private LocalDateTime lastLogin;

        /**
         * Sets the last login time to the current time before persisting.
         * This method is called automatically by JPA.
         */
        @PrePersist
        protected void onCreate() {
            this.lastLogin = LocalDateTime.now();
        }

        /**
         * Default constructor.
         * Initializes a new instance of the User class.
         */
        public User() {}

        /**
         * Full constructor.
         * Initializes the user with the specified username, password, and role.
         * Sets the user as active.
         *
         * @param username the username of the user
         * @param password the password of the user
         * @param role the role of the user
         */
        public User(String username, String password, Role role) {
            this.username = username;
            this.password = password;
            this.role = role;
            this.isActive = true;
        }

        /**
         * Gets the ID of the user.
         *
         * @return the ID of the user
         */
        public Long getId() {
            return id;
        }

        /**
         * Sets the ID of the user.
         *
         * @param id the ID to set
         */
        public void setId(Long id) {
            this.id = id;
        }

        /**
         * Gets the username of the user.
         *
         * @return the username of the user
         */
        public String getUsername() {
            return username;
        }

        /**
         * Sets the username of the user.
         *
         * @param username the username to set
         */
        public void setUsername(String username) {
            this.username = username;
        }

        /**
         * Gets the password of the user.
         *
         * @return the password of the user
         */
        public String getPassword() {
            return password;
        }

        /**
         * Sets the password of the user.
         *
         * @param password the password to set
         */
        public void setPassword(String password) {
            this.password = password;
        }

        /**
         * Gets the role of the user.
         *
         * @return the role of the user
         */
        public Role getRole() {
            return role;
        }

        /**
         * Sets the role of the user.
         *
         * @param role the role to set
         */
        public void setRole(Role role) {
            this.role = role;
        }

        /**
         * Gets the first name of the user.
         *
         * @return the first name of the user
         */
        public String getFirstName() {
            return firstName;
        }

        /**
         * Sets the first name of the user.
         *
         * @param firstName the first name to set
         */
        public void setFirstName(String firstName) {
            this.firstName = firstName;
        }

        /**
         * Gets the last name of the user.
         *
         * @return the last name of the user
         */
        public String getLastName() {
            return lastName;
        }

        /**
         * Sets the last name of the user.
         *
         * @param lastName the last name to set
         */
        public void setLastName(String lastName) {
            this.lastName = lastName;
        }

        /**
         * Gets whether the user is active.
         *
         * @return true if the user is active, false otherwise
         */
        public Boolean getIsActive() {
            return isActive;
        }

        /**
         * Sets whether the user is active.
         *
         * @param active true to set the user as active, false otherwise
         */
        public void setIsActive(Boolean active) {
            isActive = active;
        }

        /**
         * Gets the last login time of the user.
         *
         * @return the last login time of the user
         */
        public LocalDateTime getLastLogin() {
            return lastLogin;
        }

        /**
         * Sets the last login time of the user.
         *
         * @param lastLogin the last login time to set
         */
        public void setLastLogin(LocalDateTime lastLogin) {
            this.lastLogin = lastLogin;
        }
    }