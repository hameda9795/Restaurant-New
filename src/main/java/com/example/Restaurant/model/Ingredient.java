package com.example.Restaurant.model;

import jakarta.persistence.*;

/**
 * The Ingredient class represents an ingredient used in the restaurant.
 * This entity is mapped to the "ingredient" table in the database.
 *
 * Relationships:
 * - None directly, but it can be referenced by other entities.
 */
@Entity
public class Ingredient {

    /**
     * The unique identifier for the ingredient.
     * This field is mapped to the "id" column in the "ingredient" table.
     * It is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The name of the ingredient.
     * This field is mapped to the "name" column in the "ingredient" table.
     * It is a required field.
     */
    private String name;

    /**
     * The current stock level of the ingredient.
     * This field is mapped to the "current_stock" column in the "ingredient" table.
     * It represents the amount of the ingredient currently in stock.
     * Default value is 0.0.
     */
    private Double currentStock = 0.0;

    /**
     * The threshold level for the ingredient.
     * This field is mapped to the "threshold" column in the "ingredient" table.
     * It represents the stock level at which the ingredient is considered low.
     * Default value is 0.0.
     */
    private Double threshold = 0.0;
    /**
     * The supplier that provides this ingredient.
     * Establishes a Many-to-One relationship with the Supplier entity.
     * The foreign key "supplier_id" is stored in the "ingredient" table.
     */
    @ManyToOne
    @JoinColumn(name = "supplier_id")
    private Supplier supplier;
    /**
     * The stock status of the ingredient.
     * This field is not stored in the database.
     * It is calculated based on the current stock and threshold.
     *
     * @return the stock status of the ingredient
     */
    @Transient // This field is not stored in the database
    public String getStockStatus() {
        if (currentStock <= 0) {
            return "OUT_OF_STOCK";
        } else if (currentStock <= threshold) {
            return "LOW_STOCK";
        } else if (currentStock <= threshold * 2) {
            return "MEDIUM_STOCK";
        } else {
            return "WELL_STOCKED";
        }
    }

    /**
     * Gets the ID of the ingredient.
     *
     * @return the ID of the ingredient
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the ID of the ingredient.
     *
     * @param id the ID to set
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the name of the ingredient.
     *
     * @return the name of the ingredient
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name of the ingredient.
     *
     * @param name the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Gets the current stock level of the ingredient.
     *
     * @return the current stock level of the ingredient
     */
    public Double getCurrentStock() {
        return currentStock;
    }

    /**
     * Sets the current stock level of the ingredient.
     *
     * @param currentStock the current stock level to set
     */
    public void setCurrentStock(Double currentStock) {
        this.currentStock = currentStock;
    }

    /**
     * Gets the threshold level for the ingredient.
     *
     * @return the threshold level for the ingredient
     */
    public Double getThreshold() {
        return threshold;
    }

    /**
     * Sets the threshold level for the ingredient.
     *
     * @param threshold the threshold level to set
     */
    public void setThreshold(Double threshold) {
        this.threshold = threshold;
    }

    public Supplier getSupplier() { return supplier; }
    public void setSupplier(Supplier supplier) { this.supplier = supplier; }
}